3.4.	Uncredentialed Patient Portal API Access
The final vulnerability discovered was related to the patient portal API.  The registration process intends to allow an uncredentialed user to create an account. One API call to register a new patient was previously abused. The patient portal API also exposes the ability to read, update and delete all stored patient records.

3.4.1.	Vulnerability Discovery
A review of the Patient Controller responsible for handling the patient API calls shows the protection for the “Query” and “ListView” functions by adding a check to the Global “bootstrap_register” discussed earlier.  When this is set, the PID provided is overridden to 0. Since no patient with the ID of 0 exists, the functions fail to provide any data.

/portal/patient/libs/controller/PatientController.php
152: if (!empty($GLOBALS['bootstrap_register'])) {
153:     $pid = 0;
154: }

The create method requires that the register flag is set in the session to operate.  This is expected since there cannot be a patient ID in the current workflow.  However, the three remaining functions of “Read”, “Update”, and “Delete” perform no check for a “bootstrap_register” flag and pull the patient ID from the query string.  The expected check for these functions is in the “/portal/patient/index.php”, but no “PID” was set, the checks passed, and access is provided.
The threat actor can control the information request by changing the “PID” value in the query string, which MITRE identifies as an Authorization Bypass Through User-Controlled Key (CWE-639) vulnerability.  Further, the access checks are not consistently applied across the API calls. The registration check is missing from the “Read”, “Update, and “Delete” API calls that MITRE identifies as a Missing Authorization (CWE-862).  The resulting ability to download the patient information from a read API call is identified by MITRE as an Exposure of Private Personal Information to an Unauthorized Actor (CWE-359).  

3.4.2.	Exploitation 
Exploiting this vulnerability only requires beginning the registration process without completing it and performing any unprotected API calls.  In the POC, a call is made to register as previously done in the past exploits. A patient ID is requested from the user or utilizing the same code from the patient lookup vulnerability, and the script provides the ability to look up a patient by email, the first and the last name.  This PID is used in the query string of the API calls to retrieve patient details or delete the patient as requested by the user.  The update of a patient requires additional input to gather the information being submitted into a JSON string and place it in the request’s body.
The complete POC code is provided in Appendix E.
Perhaps the most significant threat to the practice is the mass download of patient records.  This is possible by looping through PID values to download each patient record in succession.  The same process is followed in this POC to authenticate and provide an active API session.  A call is made to identify the largest PID in use and delivered to the script executor to estimate the number of patients available to download and give the option to download only a batch of records or all records.  Patients are downloaded in succession and written to a CSV file following this information submission.
The complete POC code is provided in Appendix F.

3.4.3.	Mitigation Advice
Adding similar checks that are performed in the “Query” and “ListView” functions to prevent users with the “bootstrap_register” flag set would stop the attacker from being able to make these calls for other patient records.  

3.4.4.	Scoring and Disclosure
This vulnerability poses the greatest threat to the practice.  The ability to request any single patient record or all patient records by iterating through the used patient IDs elevates the risk significantly.  Beyond this, the information leaked is considerably more valuable.  Obtaining first, middle, last, date of birth, address, driver’s license, social security, phone, emergency contact, sex, ethnicity, and religion provides complete exposure for abuse in credit card fraud, tax fraud, impersonation, or creation of highly reliable phishing emails to obtain even more sensitive information.
This vulnerability is usable from the public internet and requires a low complexity of code to exploit.  It requires no privileges and no user interaction.  The impact on the patient would be a complete compromise of their personally identifiable information.  The effect on the practice would likely entail class action lawsuits, fines from regulators, and loss of credibility.  Data integrity can be compromised entirely using the “Update” function, and confidentiality is completely compromised with the “Read” function. These factors contribute to a base score of 9.1.  Since a reliable exploit exists and has been confirmed by the project owner, the temporal score is 8.9.  Finally, Environmental Score components follow the base score components and contribute to a score of 9.6. This calculates to a CVVS v3.1 score of 9.6.
The vulnerability, exploit, and CVVS calculations were provided to the project owners via secure email, who verified the receipt and began work on a patch to alleviate the issue.  Following the patch publication, the source code for the exploit was posted on GitHub, and a CVE was published to identify the vulnerability publicly and promote patching. The CVE ID issued for this vulnerability is CVE-2022-XXXXX.
